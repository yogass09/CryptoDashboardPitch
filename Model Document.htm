<html><style>body {
color: #FFFFFF;
background-color: #140000;
font-size: 24;
font-family: Monospace;
font-weight: bold;
font-style: italic;
}
h1, h2, h3, h4, h5, h6 {
color: #FFFFFF;
background-color: #140000;
font-size: 24;
font-family: Monospace;
font-weight: bold;
font-style: italic;
}
table, pre {
color: #FFFFFF;
background-color: #140000;
font-size: 16;
font-family: Monospace;
font-weight: normal;
font-style: normal;
}

ul, #myUL {
  list-style-type: none;
}

#myUL {
  margin: 0;
  padding: 0;
}

.caret, .dropDownCaret {
  cursor: pointer;
}

.caret::before {
	content: "\25B6";
	color: black;
	display: inline - block;
	margin - right: 6px;
}

.dropDownCaret::before {
	content: "\25BC";
	color: black;
	display: inline - block;
	margin - right: 6px;
	float: right;
}


.nested {
  display: none;
}

.active {
  display: block;
}
</style><body><br></br><h1><div>Power BI Documentation</div></h1><br></br><hr></hr><h2><div>Generated by <a href="http://radacad.com/power-bi-helper">Power BI Helper</a> (Copyright &copy; <a href="http://radacad.com">RADACAD</a>).</div><br></br><div>Date: 30/05/2024 09:54:38</div><br></br></h2><h1><div>------------------******   Model    ******---------------------</div></h1><br></br><h2><div>Model: version 2.1(Title Screen)</div></h2><br></br><hr></hr><br></br><h3><div>List of Tables:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1' bgcolor='lightyellow' style='font-family:Garamond; font-size:18'><tr ><td >Name</td><td >Description</td><td >Storage Mode</td><td >Source</td><td >Is Hidden</td></tr><tr ><td >CryptoMaster</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoMasterFile.csv"),[Delimiter=",", Columns=10, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"symbol", type text}, {"date", type date}, {"open", type number}, {"close", type number}, {"market_cap", type number}, {"rank", Int64.Type}, {"ret", type number}, {"log_ret", type number}, {"Code", type text}, {"mcapcat", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Code", "code"}, {"mcapcat", "m_cap_cat"}}),
    #"Sorted Rows" = Table.Sort(#"Renamed Columns",{{"close", Order.Descending}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Sorted Rows",{{"market_cap", Int64.Type}}),
    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type1",{"date", "symbol", "open", "close", "market_cap", "rank", "ret", "log_ret", "code", "m_cap_cat"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Reordered Columns",{{"code", "cycle"}}),
    #"Split Column by Character Transition" = Table.SplitColumn(#"Renamed Columns1", "cycle", Splitter.SplitTextByCharacterTransition({"0".."9"}, (c) => not List.Contains({"0".."9"}, c)), {"cycle.1", "cycle.2"}),
    #"Removed Columns" = Table.RemoveColumns(#"Split Column by Character Transition",{"cycle.2"}),
    #"Split Column by Character Transition1" = Table.SplitColumn(#"Removed Columns", "cycle.1", Splitter.SplitTextByCharacterTransition({"0".."9"}, (c) => not List.Contains({"0".."9"}, c)), {"cycle.1.1", "cycle.1.2"}),
    #"Split Column by Character Transition2" = Table.SplitColumn(#"Split Column by Character Transition1", "cycle.1.1", Splitter.SplitTextByCharacterTransition((c) => not List.Contains({"0".."9"}, c), {"0".."9"}), {"cycle.1.1.1", "cycle.1.1.2"}),
    #"Removed Columns1" = Table.RemoveColumns(#"Split Column by Character Transition2",{"cycle.1.2"}),
    #"Renamed Columns2" = Table.RenameColumns(#"Removed Columns1",{{"cycle.1.1.2", "cycle_year"}, {"cycle.1.1.1", "cycle"}, {"symbol", "ticker"}}),
    #"Replaced Value" = Table.ReplaceValue(#"Renamed Columns2","NA","PreBull",Replacer.ReplaceText,{"cycle"}),
    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value",null,"2024",Replacer.ReplaceValue,{"cycle_year"}),
    #"Merged Queries" = Table.NestedJoin(#"Replaced Value1", {"ticker"}, Crypto_Ticker_Name, {"ticker"}, "Crypto_Ticker_Name", JoinKind.LeftOuter),
    #"Expanded Crypto_Ticker_Name" = Table.ExpandTableColumn(#"Merged Queries", "Crypto_Ticker_Name", {"name"}, {"Crypto_Ticker_Name.name"}),
    #"Renamed Columns3" = Table.RenameColumns(#"Expanded Crypto_Ticker_Name",{{"Crypto_Ticker_Name.name", "name"}})
in
    #"Renamed Columns3"</pre></td><td >False</td></tr><tr ><td >DateTableTemplate_960e99c0-2c2a-4c19-8100-f6d13eb86238</td><td ></td><td >Import</td><td ><pre>Calendar(Date(2015,1,1), Date(2015,1,1))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_2e506596-e7be-4391-9c4e-520e022e5bb8</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('CryptoMaster'[date])), 1, 1), Date(Year(MAX('CryptoMaster'[date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >CryptoMetrics</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\crypto_performance_metrics_ratio.csv"),[Delimiter=",", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"Beta", type text}, {"average_alpha", type text}, {"omega_ratio", type text}, {"sortino_ratio", type number}, {"sharpe_ratio", type number}, {"max_drawdown", type number}, {"latest_alltime", type number}}),
    #"Sorted Rows" = Table.Sort(#"Changed Type",{{"latest_alltime", Order.Ascending}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Sorted Rows",{{"Beta", Currency.Type}, {"average_alpha", Currency.Type}, {"omega_ratio", Currency.Type}, {"sortino_ratio", Currency.Type}, {"sharpe_ratio", Currency.Type}}),
    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type1", {"omega_ratio"}),
    #"Removed Errors1" = Table.RemoveRowsWithErrors(#"Removed Errors", {"Beta", "average_alpha"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Removed Errors1",{{"max_drawdown", Percentage.Type}})
in
    #"Changed Type2"</pre></td><td >False</td></tr><tr ><td >CoinAge</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Desktop\powerBI To tableau shift\CoinAge.csv"),[Delimiter=",", Columns=4, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"first_historical_data", type date}, {"coin_age_days", Int64.Type}, {"coin_class", type text}})
in
    #"Changed Type"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_41583ba7-0672-4a9f-90e4-4abe56672745</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('CoinAge'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAge'[first_historical_data])), 12, 31))</pre></td><td >True</td></tr><tr ><td >ATH</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Desktop\powerBI To tableau shift\RatiosMeasures.csv"),[Delimiter=",", Columns=18, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"ATHDate", type date}, {"Earliest date", type date}, {"First coin_age_days", Int64.Type}, {"First coin_class", type text}, {"Max of average_alpha", type number}, {"Sum of Beta", type number}, {"Sum of omega_ratio", type number}, {"Sum of sharpe_ratio", type number}, {"Sum of sortino_ratio", type number}, {"Sum of todate_return", Percentage.Type}, {"Sum of max_drawdown", Percentage.Type}, {"Sum of close", type number}, {" ATH ", type text}, {"ATHDays", Int64.Type}, {"Last mcapcat", type text}, {"BTCCorr", type number}, {"ETHCorr", type number}}),
    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each ([ATHDate] <> null) and ([Earliest date] = #date(2024, 4, 25)) and ([First coin_age_days] <> null)),
    #"Removed Other Columns" = Table.SelectColumns(#"Filtered Rows",{"ATHDays", " ATH ", "Sum of close", "ATHDate", "ticker", "First coin_age_days", "First coin_class"}),
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Other Columns",{"ticker", "Sum of close", " ATH ", "ATHDays", "First coin_class", "ATHDate", "First coin_age_days"}),
    #"Renamed Columns" = Table.RenameColumns(#"Reordered Columns",{{"Sum of close", "curr_close"}, {" ATH ", "ath"}, {"ATHDays", "days_s_ath"}, {"First coin_class", "coin_class"}, {"ATHDate", "ath_date"}, {"First coin_age_days", "coin_age"}}),
    #"Split Column by Delimiter" = Table.SplitColumn(#"Renamed Columns", "ath", Splitter.SplitTextByDelimiter("$", QuoteStyle.Csv), {"ath.1", "ath.2"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"ath.1", type text}, {"ath.2", type number}}),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type1",{"ath.1"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Removed Columns",{{"ath.2", "ath"}}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Renamed Columns1",{{"ath", Currency.Type}, {"curr_close", Currency.Type}}),
    #"Reordered Columns1" = Table.ReorderColumns(#"Changed Type2",{"ticker", "coin_class", "coin_age", "curr_close", "ath", "days_s_ath", "ath_date"})
in
    #"Reordered Columns1"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_dfe27dfb-a20d-4bac-941c-f68aeaaa0d2f</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('ATH'[ath_date])), 1, 1), Date(Year(MAX('ATH'[ath_date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >latest_mcap_crypto</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\latest_mcap_crypto.csv"),[Delimiter=",", Columns=2, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Change Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}, {"Column2", type text}}),
    #"Promoted Headers" = Table.PromoteHeaders(#"Change Type", [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"m_cap_cat", type text}}),
    #"Sorted Rows" = Table.Sort(#"Changed Type",{{"m_cap_cat", Order.Ascending}})
in
    #"Sorted Rows"</pre></td><td >False</td></tr><tr ><td >Crypto_Ticker_Name</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Crypto_Ticker_Name.csv"),[Delimiter=",", Columns=6, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type text}}),
    #"Promoted Headers" = Table.PromoteHeaders(#"Changed Type", [PromoteAllScalars=true]),
    #"Changed Type1" = Table.TransformColumnTypes(#"Promoted Headers",{{"name", type text}, {"symbol", type text}, {"", type text}, {"_1", type text}, {"_2", type text}, {"_3", type text}}),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type1",{"", "_1", "_2", "_3"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns",{{"symbol", "ticker"}})
in
    #"Renamed Columns"</pre></td><td >False</td></tr><tr ><td >CryptoReturns</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoReturns.csv"),[Delimiter=",", Columns=9, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"date", type date}, {"close", type number}, {"return_1d", Percentage.Type}, {"return_3d", Percentage.Type}, {"return_7d", Percentage.Type}, {"return_30d", Percentage.Type}, {"return_365d", Percentage.Type}, {"return_730d", Percentage.Type}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"return_1d", "%1d"}, {"return_3d", "%3d"}, {"return_7d", "%7d"}, {"return_30d", "%30d"}, {"return_365d", "%1Y"}, {"return_730d", "%2Y"}}),
    #"Removed Columns" = Table.RemoveColumns(#"Renamed Columns",{"close"})
in
    #"Removed Columns"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_110ffced-6b94-4c4d-ae49-23e2cb108d58</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('CryptoReturns'[date])), 1, 1), Date(Year(MAX('CryptoReturns'[date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >IndicesData</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\IndicesData.csv"),[Delimiter=",", Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"ref_date", type date}, {"price_open", type number}, {"price_high", type number}, {"price_low", type number}, {"price_close", type number}, {"volume", Int64.Type}, {"price_adjusted", type number}, {"ret_adjusted_prices", type text}, {"ret_closing_prices", type text}, {"cumret_adjusted_prices", type number}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"ref_date", "date"}}),
    #"Trimmed Text" = Table.TransformColumns(#"Renamed Columns", {{"ticker", each Text.Middle(_, 1), type text}}),
    #"Removed Other Columns" = Table.SelectColumns(#"Trimmed Text",{"ticker", "date", "price_adjusted", "volume", "ret_adjusted_prices", "cumret_adjusted_prices"}),
    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each true),
    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows",{{"ret_adjusted_prices", Percentage.Type}, {"cumret_adjusted_prices", Percentage.Type}}),
    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type1", {"ret_adjusted_prices"}),
    #"Removed Errors1" = Table.RemoveRowsWithErrors(#"Removed Errors", {"cumret_adjusted_prices"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Removed Errors1",{{"cumret_adjusted_prices", type number}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type2", "Custom", each [cumret_adjusted_prices]-1),
    #"Removed Columns" = Table.RemoveColumns(#"Added Custom",{"cumret_adjusted_prices"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Removed Columns",{{"Custom", "cumret_adjusted_prices"}}),
    #"Changed Type3" = Table.TransformColumnTypes(#"Renamed Columns1",{{"cumret_adjusted_prices", Percentage.Type}}),
    #"Renamed Columns2" = Table.RenameColumns(#"Changed Type3",{{"price_adjusted", "close"}, {"ret_adjusted_prices", "ret"}, {"cumret_adjusted_prices", "cum_ret"}}),
    #"Merged Queries" = Table.NestedJoin(#"Renamed Columns2", {"ticker"}, IndicesNameKey, {"ticker"}, "IndicesNameKey", JoinKind.LeftOuter),
    #"Expanded IndicesNameKey" = Table.ExpandTableColumn(#"Merged Queries", "IndicesNameKey", {"country", "index_name"}, {"IndicesNameKey.country", "IndicesNameKey.index_name"}),
    #"Renamed Columns3" = Table.RenameColumns(#"Expanded IndicesNameKey",{{"IndicesNameKey.country", "country"}, {"IndicesNameKey.index_name", "IndexName"}})
in
    #"Renamed Columns3"</pre></td><td >False</td></tr><tr ><td >IndicesNameKey</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Indices.csv"),[Delimiter=",", Columns=4, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Country", type text}, {"Index Name", type text}, {"Ticker", type text}, {"Start Date", type date}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Ticker", "ticker"}, {"Start Date", "inceptiondate"}, {"Country", "country"}, {"Index Name", "index_name"}}),
    #"Trimmed Text" = Table.TransformColumns(#"Renamed Columns", {{"ticker", each Text.Middle(_, 1), type text}})
in
    #"Trimmed Text"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_7cc56d3f-cef4-43c1-b764-b5f71bfdb25d</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('IndicesNameKey'[inceptiondate])), 1, 1), Date(Year(MAX('IndicesNameKey'[inceptiondate])), 12, 31))</pre></td><td >True</td></tr><tr ><td >CMCData</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMCData.csv"),[Delimiter=",", Columns=11, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ticker", type text}, {"ref_date", type date}, {"price_open", type number}, {"price_high", type number}, {"price_low", type number}, {"price_close", type number}, {"volume", Int64.Type}, {"price_adjusted", type number}, {"ret_adjusted_prices", type text}, {"ret_closing_prices", type text}, {"cumret_adjusted_prices", type number}}),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type",{"price_open", "price_high", "price_low", "price_close", "volume", "ret_closing_prices"}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Removed Columns",{{"ret_adjusted_prices", Percentage.Type}, {"cumret_adjusted_prices", Percentage.Type}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type1", "Custom", each [cumret_adjusted_prices]-100),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added Custom",{{"cumret_adjusted_prices", type number}}),
    #"Removed Columns1" = Table.RemoveColumns(#"Changed Type2",{"Custom"}),
    #"Added Custom1" = Table.AddColumn(#"Removed Columns1", "Custom", each [cumret_adjusted_prices]-1),
    #"Removed Columns2" = Table.RemoveColumns(#"Added Custom1",{"cumret_adjusted_prices"}),
    #"Renamed Columns" = Table.RenameColumns(#"Removed Columns2",{{"Custom", "cum_ret"}, {"ret_adjusted_prices", "ret"}, {"price_adjusted", "close"}}),
    #"Changed Type3" = Table.TransformColumnTypes(#"Renamed Columns",{{"cum_ret", Percentage.Type}}),
    #"Removed Errors" = Table.RemoveRowsWithErrors(#"Changed Type3", {"ret"}),
    #"Removed Errors1" = Table.RemoveRowsWithErrors(#"Removed Errors", {"cum_ret"}),
    #"Merged Queries" = Table.NestedJoin(#"Removed Errors1", {"ticker"}, CMC, {"Ticker"}, "CMC", JoinKind.LeftOuter),
    #"Expanded CMC" = Table.ExpandTableColumn(#"Merged Queries", "CMC", {"CMC"}, {"CMC.CMC"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Expanded CMC",{{"CMC.CMC", "CMC"}})
in
    #"Renamed Columns1"</pre></td><td >False</td></tr><tr ><td >CMC</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMC.csv"),[Delimiter=",", Columns=2, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Column1", type text}, {"Column2", type text}}),
    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Column1", "CMC"}, {"Column2", "Ticker"}}),
    #"Removed Top Rows" = Table.Skip(#"Renamed Columns",1)
in
    #"Removed Top Rows"</pre></td><td >False</td></tr><tr ><td >corrdata_btc_indices</td><td ></td><td >Import</td><td ><pre>
UNION(
    SELECTCOLUMNS(
        FILTER(
            CryptoMaster,
            CryptoMaster[ticker] IN {"btc", "eth"}
        ),
        "ticker", CryptoMaster[ticker],
        "date", CryptoMaster[date],
        "close", CryptoMaster[close]
    ),
    SELECTCOLUMNS(
        IndicesData,
        "ticker", IndicesData[IndexName],
        "date", IndicesData[date],
        "close", IndicesData[close]
    )
)
</pre></td><td >False</td></tr><tr ><td >corrdata_crypto_CMC</td><td ></td><td >Import</td><td ><pre>
UNION(
    SELECTCOLUMNS(
        CMCdata,
        "ticker", CMCData[CMC],
        "date", CMCdata[ref_date],
        "close", CMCdata[close]
    ),
    SELECTCOLUMNS(
        FILTER(
            CryptoMaster,
            CryptoMaster[ticker] IN {"btc", "eth"}
        ),
        "ticker", CryptoMaster[ticker],
        "date", CryptoMaster[date],
        "close", CryptoMaster[close]
    )
)
</pre></td><td >False</td></tr><tr ><td >CoinAgeTimelineData</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\DATA\Crypto\DataCryptoMaster1.csv"),[Delimiter=",", Columns=8, Encoding=65001, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"id", Int64.Type}, {"rank", Int64.Type}, {"name", type text}, {"symbol", type text}, {"slug", type text}, {"is_active", Int64.Type}, {"first_historical_data", type date}, {"last_historical_data", type date}}),
    #"Merged Queries" = Table.NestedJoin(#"Changed Type", {"symbol"}, CoinAge, {"ticker"}, "CoinAge", JoinKind.LeftOuter),
    #"Expanded CoinAge1" = Table.ExpandTableColumn(#"Merged Queries", "CoinAge", {"coin_age_days", "coin_class"}, {"CoinAge.coin_age_days", "CoinAge.coin_class"}),
    #"Removed Other Columns" = Table.SelectColumns(#"Expanded CoinAge1",{"symbol", "slug", "first_historical_data", "last_historical_data", "CoinAge.coin_age_days", "CoinAge.coin_class"}),
    #"Filtered Rows" = Table.SelectRows(#"Removed Other Columns", each [CoinAge.coin_class] <> null and [CoinAge.coin_class] <> ""),
    #"Renamed Columns" = Table.RenameColumns(#"Filtered Rows",{{"CoinAge.coin_class", "class"}, {"CoinAge.coin_age_days", "coin_age_days"}, {"symbol", "ticker"}}),
    #"Merged Queries1" = Table.NestedJoin(#"Renamed Columns", {"ticker"}, latest_mcap_crypto, {"ticker"}, "latest_mcap_crypto", JoinKind.LeftOuter),
    #"Expanded latest_mcap_crypto" = Table.ExpandTableColumn(#"Merged Queries1", "latest_mcap_crypto", {"m_cap_cat"}, {"latest_mcap_crypto.m_cap_cat"}),
    #"Renamed Columns1" = Table.RenameColumns(#"Expanded latest_mcap_crypto",{{"latest_mcap_crypto.m_cap_cat", "m_cap_cat"}}),
    #"Sorted Rows" = Table.Sort(#"Renamed Columns1",{{"m_cap_cat", Order.Ascending}}),
    #"Filtered Rows1" = Table.SelectRows(#"Sorted Rows", each [m_cap_cat] <> null and [m_cap_cat] <> ""),
    #"Merged Queries2" = Table.NestedJoin(#"Filtered Rows1", {"ticker"}, CryptoMetrics, {"ticker"}, "CryptoMaster", JoinKind.Inner),
    #"Expanded CryptoMaster1" = Table.ExpandTableColumn(#"Merged Queries2", "CryptoMaster", {"omega_ratio", "max_drawdown", "latest_alltime"}, {"CryptoMaster.omega_ratio", "CryptoMaster.max_drawdown", "CryptoMaster.latest_alltime"}),
    #"Filtered Rows2" = Table.SelectRows(#"Expanded CryptoMaster1", each [CryptoMaster.omega_ratio] <> null and [CryptoMaster.omega_ratio] <> ""),
    #"Changed Type1" = Table.TransformColumnTypes(#"Filtered Rows2",{{"CryptoMaster.latest_alltime", Percentage.Type}}),
    #"Sorted Rows1" = Table.Sort(#"Changed Type1",{{"CryptoMaster.latest_alltime", Order.Descending}}),
    #"Renamed Columns2" = Table.RenameColumns(#"Sorted Rows1",{{"CryptoMaster.omega_ratio", "omega_ratio"}, {"CryptoMaster.max_drawdown", "drawdown"}, {"CryptoMaster.latest_alltime", "alltime"}}),
    #"Filtered Rows3" = Table.SelectRows(#"Renamed Columns2", each [drawdown] <> null and [drawdown] <> ""),
    #"Filtered Rows4" = Table.SelectRows(#"Filtered Rows3", each [drawdown] < 0.88),
    #"Filtered Rows5" = Table.SelectRows(#"Filtered Rows4", each [omega_ratio] > 0.88),
    #"Filtered Rows6" = Table.SelectRows(#"Filtered Rows5", each [alltime] > 0),
    #"Removed Duplicates" = Table.Distinct(#"Filtered Rows6", {"slug"}),
    #"Sorted Rows2" = Table.Sort(#"Removed Duplicates",{{"omega_ratio", Order.Descending}}),
    #"Filtered Rows7" = Table.SelectRows(#"Sorted Rows2", each ([class] <> "gen_z+")),
    #"Sorted Rows3" = Table.Sort(#"Filtered Rows7",{{"class", Order.Ascending}})
in
    #"Sorted Rows3"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_f791921f-5099-494e-b1d4-0853865d8a4b</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('CoinAgeTimelineData'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[first_historical_data])), 12, 31))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_05dcca00-8f1b-4c37-a3cd-46e3b7d99673</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('CoinAgeTimelineData'[last_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[last_historical_data])), 12, 31))</pre></td><td >True</td></tr><tr ><td >NewsandEvents</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"),[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Start Date", type date}, {"End Date", type date}, {"Period", type text}, {"Biggest Event", type text}, {"Description", type text}, {"Event Date", type date}}),
    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each ([Start Date] <> null))
in
    #"Filtered Rows"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_e857162e-536b-4af3-acb1-f62f3d4d34b0</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('NewsandEvents'[Start Date])), 1, 1), Date(Year(MAX('NewsandEvents'[Start Date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_19718fcf-f857-4eaa-b26f-88b66c4f1321</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('NewsandEvents'[End Date])), 1, 1), Date(Year(MAX('NewsandEvents'[End Date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >Period</td><td ></td><td >Import</td><td ><pre>let
    Source = Csv.Document(File.Contents("C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"),[Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Start Date", type date}, {"End Date", type date}, {"Period", type text}, {"Biggest Event", type text}, {"Description", type text}, {"Event Date", type date}}),
    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each ([Start Date] <> null)),
    #"Removed Bottom Rows" = Table.RemoveLastN(#"Filtered Rows",4),
    #"Removed Bottom Rows1" = Table.RemoveLastN(#"Removed Bottom Rows",3)
in
    #"Removed Bottom Rows1"</pre></td><td >False</td></tr><tr ><td >LocalDateTable_ef645a16-ad19-4fb1-ae46-3bd06535ca8c</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('Period'[Event Date])), 1, 1), Date(Year(MAX('Period'[Event Date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_d886f37f-43f4-4e9f-a311-1d6702e055d6</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('Period'[End Date])), 1, 1), Date(Year(MAX('Period'[End Date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_73b926ee-758b-4a1e-b69d-b3b34fe80f4d</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('corrdata_crypto_CMC'[date])), 1, 1), Date(Year(MAX('corrdata_crypto_CMC'[date])), 12, 31))</pre></td><td >True</td></tr><tr ><td >LocalDateTable_c8075966-ebf8-4edc-a62c-dcf4bd8866df</td><td ></td><td >Import</td><td ><pre>Calendar(Date(Year(MIN('corrdata_btc_indices'[date])), 1, 1), Date(Year(MAX('corrdata_btc_indices'[date])), 12, 31))</pre></td><td >True</td></tr></table><hr></hr><br></br><h3><div>List of Measures:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Measure Name</th>
		<th>Table Name</th>
		<th>Description</th>
		<th>Expression</th>
		<th>Dependency</th>
		<th>Reverse Dependency</th>
	</tr>
	<tr>
		<td>Coin Age</td>
		<td>CoinAge</td>
		<td></td>
		<td><pre>DIVIDE (
    SUM ( 'CoinAge'[coin_age_days] ),
    365
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Coin Age</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: CoinAge</li>
<li>Column: coin_age_days (Table: CoinAge)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Coin Age</td>
	</tr>
	<tr>
		<td>% Drop from ATH</td>
		<td>ATH</td>
		<td></td>
		<td><pre>VAR CurrentClose =
    SELECTEDVALUE ( ATH[curr_close] )
VAR ATHValue =
    SELECTEDVALUE ( ATH[ath] )
RETURN
    IF (
        NOT ISBLANK ( ATHValue ),
        ( CurrentClose - ATHValue ) / ATHValue,
        BLANK ()
    )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: % Drop from ATH</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ATH</li>
<li>Column: curr_close (Table: ATH)</li>
<li>Column: ath (Table: ATH)</li>
</ul></span></li>
</ul></td>
		<td>Measure: % Drop from ATH</td>
	</tr>
	<tr>
		<td>% Gain to ATH</td>
		<td>ATH</td>
		<td></td>
		<td><pre>VAR CurrentClose =
    SELECTEDVALUE ( ATH[curr_close] )
VAR ATHValue =
    SELECTEDVALUE ( ATH[ath] )
RETURN
    IF (
        NOT ISBLANK ( ATHValue )
            && NOT ISBLANK ( CurrentClose )
                && CurrentClose <> 0,
        ( ATHValue - CurrentClose ) / CurrentClose,
        BLANK ()
    )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: % Gain to ATH</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ATH</li>
<li>Column: curr_close (Table: ATH)</li>
<li>Column: ath (Table: ATH)</li>
</ul></span></li>
</ul></td>
		<td>Measure: % Gain to ATH</td>
	</tr>
	<tr>
		<td>Months_s_ATH</td>
		<td>ATH</td>
		<td></td>
		<td><pre>DIVIDE (
    SUM ( 'ATH'[days_s_ath] ),
    30
)</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Months_s_ATH</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: ATH</li>
<li>Column: days_s_ath (Table: ATH)</li>
</ul></span></li>
</ul></td>
		<td>Measure: Months_s_ATH</td>
	</tr>
	<tr>
		<td>Mean %1d</td>
		<td>CryptoReturns</td>
		<td></td>
		<td><pre>AVERAGE ( 'CryptoMaster'[ret] )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Mean %1d</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Table: CryptoMaster</span>
<ul class="nested">
<li>Partition: Crypto_Ticker_Name (Table: Crypto_Ticker_Name)</li>
</ul></li>
<li>Column: ret (Table: CryptoMaster)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Mean %1d</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Covariance %1d-ret</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>StdDev %1d</td>
		<td>CryptoReturns</td>
		<td></td>
		<td><pre>STDEV.P ( 'CryptoReturns'[%1d] )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: StdDev %1d</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: CryptoReturns</li>
<li>Column: %1d (Table: CryptoReturns)</li>
</ul></span></li>
</ul></td>
		<td>Measure: StdDev %1d</td>
	</tr>
	<tr>
		<td>Mean ret</td>
		<td>IndicesData</td>
		<td></td>
		<td><pre>AVERAGE ( 'IndicesData'[ret] )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Mean ret</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Table: IndicesData</span>
<ul class="nested">
<li>Partition: IndicesNameKey (Table: IndicesNameKey)</li>
</ul></li>
<li>Column: ret (Table: IndicesData)</li>
</ul></span></li>
</ul></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Mean ret</span><span class="dropDownCaret">
<ul class="nested">
<li>Measure: Covariance %1d-ret</li>
</ul></span></li>
</ul></td>
	</tr>
	<tr>
		<td>StdDev ret</td>
		<td>IndicesData</td>
		<td></td>
		<td><pre>STDEV.P ( 'IndicesData'[ret] )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: StdDev ret</span><span class="dropDownCaret">
<ul class="nested">
<li><span class="caret">Table: IndicesData</span>
<ul class="nested">
<li>Partition: IndicesNameKey (Table: IndicesNameKey)</li>
</ul></li>
<li>Column: ret (Table: IndicesData)</li>
</ul></span></li>
</ul></td>
		<td>Measure: StdDev ret</td>
	</tr>
	<tr>
		<td>Covariance %1d-ret</td>
		<td>IndicesData</td>
		<td></td>
		<td><pre>SUMX (
    FILTER (
        CROSSJOIN (
            ALLSELECTED ( 'CryptoReturns' ),
            ALLSELECTED ( 'IndicesData' )
        ),
        'CryptoReturns'[date] = 'IndicesData'[date]
            && 'CryptoReturns'[ticker] = 'IndicesData'[ticker]
    ),
    ( 'CryptoReturns'[%1d] - [Mean %1d] ) * ( 'IndicesData'[ret] - [Mean ret] )
)
    / COUNTROWS (
        FILTER (
            CROSSJOIN (
                ALLSELECTED ( 'CryptoReturns' ),
                ALLSELECTED ( 'IndicesData' )
            ),
            'CryptoReturns'[date] = 'IndicesData'[date]
                && 'CryptoReturns'[ticker] = 'IndicesData'[ticker]
        )
    )</pre></td>
		<td><ul id="myUL">
<li><span class="caret">Measure: Covariance %1d-ret</span><span class="dropDownCaret">
<ul class="nested">
<li>Table: CryptoReturns</li>
<li>Column: ticker (Table: CryptoReturns)</li>
<li>Column: date (Table: CryptoReturns)</li>
<li>Column: %1d (Table: CryptoReturns)</li>
<li><span class="caret">Table: IndicesData</span>
<ul class="nested">
<li>Partition: IndicesNameKey (Table: IndicesNameKey)</li>
</ul></li>
<li>Column: ticker (Table: IndicesData)</li>
<li>Column: date (Table: IndicesData)</li>
<li>Column: ret (Table: IndicesData)</li>
<li><span class="caret">Measure: Mean ret (Table: IndicesData)</span>
<ul class="nested">
<li>Table: IndicesData   ...</li>
<li>Column: ret (Table: IndicesData)</li>
</ul></li>
<li><span class="caret">Measure: Mean %1d (Table: CryptoReturns)</span>
<ul class="nested">
<li><span class="caret">Table: CryptoMaster</span>
<ul class="nested">
<li>Partition: Crypto_Ticker_Name (Table: Crypto_Ticker_Name)</li>
</ul></li>
<li>Column: ret (Table: CryptoMaster)</li>
</ul></li>
</ul></span></li>
</ul></td>
		<td>Measure: Covariance %1d-ret</td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CryptoMaster:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>open</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>market_cap</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>rank</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>log_ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>m_cap_cat</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>cycle</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>cycle_year</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CryptoMetrics:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Beta</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>average_alpha</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>omega_ratio</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>sortino_ratio</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>sharpe_ratio</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>max_drawdown</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>latest_alltime</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CoinAge:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>first_historical_data</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>coin_age_days</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>coin_class</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table ATH:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>coin_class</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>coin_age</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>curr_close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ath</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>days_s_ath</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ath_date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table latest_mcap_crypto:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>m_cap_cat</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Crypto_Ticker_Name:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CryptoReturns:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%1d</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%3d</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%7d</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%30d</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%1Y</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>%2Y</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table IndicesData:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>volume</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>cum_ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>country</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>IndexName</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table IndicesNameKey:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>country</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>index_name</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>inceptiondate</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CMCData:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ref_date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>cum_ret</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>CMC</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CMC:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>CMC</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table corrdata_btc_indices:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table corrdata_crypto_CMC:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>close</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table CoinAgeTimelineData:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>ticker</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>slug</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>first_historical_data</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>last_historical_data</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>coin_age_days</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>class</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>m_cap_cat</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>omega_ratio</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>drawdown</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>alltime</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table NewsandEvents:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Start Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>End Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Period</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Biggest Event</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Description</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Event Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Columns for Table Period:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Column Name</th>
		<th>Description</th>
		<th>Calculated Column</th>
		<th>Expression</th>
	</tr>
	<tr>
		<td>Start Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>End Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Period</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Biggest Event</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Description</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
	<tr>
		<td>Event Date</td>
		<td></td>
		<td></td>
		<td></td>
	</tr>
</table>
<hr></hr><br></br><h3><div>List of Roles:</div></h3><br></br><table border="1" cellpadding="3">
	<tr>
		<th>Role Name</th>
		<th>Table Name</th>
		<th>Description</th>
		<th>Expression</th>
	</tr>
</table>
<hr></hr><br></br><h3><div>Relationships:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1' bgcolor='lightyellow' style='font-family:Garamond; font-size:18'><tr ><td >Name</td><td >CrossFilteringBehavior</td><td >FromCardinality</td><td >FromColumn</td><td >FromTable</td><td >IsActive</td><td >IsRemoved</td><td >JoinOnDateBehavior</td><td >RelyOnReferentialIntegrity</td><td >SecurityFilteringBehavior</td><td >State</td><td >ToCardinality</td><td >ToColumn</td><td >ToTable</td><td >Type</td></tr><tr ><td >8ceba4ea-cc0d-4fb9-beb8-2a9ea3f527c9</td><td >OneDirection</td><td >Many</td><td >date</td><td >CryptoMaster</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_2e506596-e7be-4391-9c4e-520e022e5bb8</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_c5cc325e-629b-4567-8c81-660d3c492854</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >01adea0d-b487-4469-9b60-1226ae8e222e</td><td >OneDirection</td><td >Many</td><td >first_historical_data</td><td >CoinAge</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_41583ba7-0672-4a9f-90e4-4abe56672745</td><td >SingleColumn</td></tr><tr ><td >bb4d9f80-729d-4999-9532-93c39fb74715</td><td >OneDirection</td><td >Many</td><td >ath_date</td><td >ATH</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_dfe27dfb-a20d-4bac-941c-f68aeaaa0d2f</td><td >SingleColumn</td></tr><tr ><td >52b0463b-0238-4482-939e-9f080ccad9b2</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >CoinAge</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >7d365a5e-317d-4144-8437-4e8a03342dc1</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >ATH</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_a393296d-d254-4453-8908-ae6dcc8362fc</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >latest_mcap_crypto</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_3f177c12-2af6-4a44-8ba3-189dda8b40fb</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >latest_mcap_crypto</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >ATH</td><td >SingleColumn</td></tr><tr ><td >0b942c28-cda5-4861-a36f-02f89e93c726</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >latest_mcap_crypto</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >2f84028c-3c4a-43d9-b3cf-4c1d298aa794</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >ticker</td><td >Crypto_Ticker_Name</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_7c00c871-53c5-4019-b6c5-b0e272370232</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >CoinAge</td><td >False</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_979cb8a1-869e-4521-aeaf-ff65d69ee3c8</td><td >BothDirections</td><td >One</td><td >ticker</td><td >ATH</td><td >False</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_122d779a-1811-4144-87e2-7f207bd80489</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >Crypto_Ticker_Name</td><td >False</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >db50142f-b8d1-4a65-bf99-e65e85d424a6</td><td >OneDirection</td><td >Many</td><td >date</td><td >CryptoReturns</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_110ffced-6b94-4c4d-ae49-23e2cb108d58</td><td >SingleColumn</td></tr><tr ><td >898c889b-1120-4c2f-99d3-8588746f9041</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >CryptoMaster</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >ticker</td><td >CryptoReturns</td><td >SingleColumn</td></tr><tr ><td >570d0669-0b24-42e2-8184-584488bd130b</td><td >BothDirections</td><td >Many</td><td >date</td><td >IndicesData</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >date</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >9933e325-43a7-4af0-a177-3ed293786873</td><td >OneDirection</td><td >Many</td><td >inceptiondate</td><td >IndicesNameKey</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_7cc56d3f-cef4-43c1-b764-b5f71bfdb25d</td><td >SingleColumn</td></tr><tr ><td >528d5f81-e418-49f2-b6b7-fd0c708d4288</td><td >BothDirections</td><td >Many</td><td >ticker</td><td >IndicesData</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >IndicesNameKey</td><td >SingleColumn</td></tr><tr ><td >1551bccf-6943-78fc-d877-bf4d7f4a6fc0</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >CMCData</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Ticker</td><td >CMC</td><td >SingleColumn</td></tr><tr ><td >6c7ba986-38b9-4a23-8518-cfbdce6ef02a</td><td >BothDirections</td><td >Many</td><td >ref_date</td><td >CMCData</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >date</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >61633471-7504-42e2-ae6b-5adabd71db2b</td><td >OneDirection</td><td >Many</td><td >first_historical_data</td><td >CoinAgeTimelineData</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_f791921f-5099-494e-b1d4-0853865d8a4b</td><td >SingleColumn</td></tr><tr ><td >001fba50-488e-4c89-a879-b87250a8bcfb</td><td >OneDirection</td><td >Many</td><td >last_historical_data</td><td >CoinAgeTimelineData</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_05dcca00-8f1b-4c37-a3cd-46e3b7d99673</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_4d5da9bb-280d-49de-88c1-6d73f673f890</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >CoinAgeTimelineData</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >AutoDetected_8e93add0-8acd-432c-9d57-985bf65d19af</td><td >OneDirection</td><td >Many</td><td >ticker</td><td >CryptoReturns</td><td >False</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >ticker</td><td >CryptoMetrics</td><td >SingleColumn</td></tr><tr ><td >8ef04702-5a3c-4ef3-91b4-1de096025bb4</td><td >OneDirection</td><td >Many</td><td >Start Date</td><td >NewsandEvents</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_e857162e-536b-4af3-acb1-f62f3d4d34b0</td><td >SingleColumn</td></tr><tr ><td >4f425b06-61a1-4a8e-8dc6-9611db63f7ae</td><td >OneDirection</td><td >Many</td><td >End Date</td><td >NewsandEvents</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_19718fcf-f857-4eaa-b26f-88b66c4f1321</td><td >SingleColumn</td></tr><tr ><td >001d6d8e-b7fe-4d3d-974b-68cb2522da71</td><td >OneDirection</td><td >Many</td><td >Event Date</td><td >Period</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_ef645a16-ad19-4fb1-ae46-3bd06535ca8c</td><td >SingleColumn</td></tr><tr ><td >02567d76-0b66-4cfe-9b22-15529ba54d1d</td><td >OneDirection</td><td >Many</td><td >End Date</td><td >Period</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_d886f37f-43f4-4e9f-a311-1d6702e055d6</td><td >SingleColumn</td></tr><tr ><td >1c1e42b3-78fb-0962-106e-b3dbf677bc36</td><td >BothDirections</td><td >Many</td><td >Start Date</td><td >Period</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >date</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >2c07c625-a08e-4677-b3b2-b7ab302e41f1</td><td >BothDirections</td><td >Many</td><td >Event Date</td><td >NewsandEvents</td><td >True</td><td >False</td><td >DateAndTime</td><td >False</td><td >OneDirection</td><td >Ready</td><td >Many</td><td >date</td><td >CryptoMaster</td><td >SingleColumn</td></tr><tr ><td >2b7d2198-3f5b-4668-8f65-1b943d932315</td><td >OneDirection</td><td >Many</td><td >date</td><td >corrdata_crypto_CMC</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_73b926ee-758b-4a1e-b69d-b3b34fe80f4d</td><td >SingleColumn</td></tr><tr ><td >da52927f-1cd6-40b0-aca1-c5f1b7606da1</td><td >OneDirection</td><td >Many</td><td >date</td><td >corrdata_btc_indices</td><td >True</td><td >False</td><td >DatePartOnly</td><td >False</td><td >OneDirection</td><td >Ready</td><td >One</td><td >Date</td><td >LocalDateTable_c8075966-ebf8-4edc-a62c-dcf4bd8866df</td><td >SingleColumn</td></tr></table><hr></hr><br></br><h2><div>M (Power Query) Script:</div></h2><br></br><br></br><font face="verdana" size="2"<div>CryptoMaster<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoMasterFile.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=10, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"<font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"open"</font>, <font color="blue">type</font> number}, {<font color="red">"close"</font>, <font color="blue">type</font> number}, {<font color="red">"market_cap"</font>, <font color="blue">type</font> number}, {<font color="red">"rank"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"ret"</font>, <font color="blue">type</font> number}, {<font color="red">"log_ret"</font>, <font color="blue">type</font> number}, {<font color="red">"Code"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"mcapcat"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Code"</font>, <font color="red">"code"</font>}, {<font color="red">"mcapcat"</font>, <font color="red">"m_cap_cat"</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"close"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Sorted Rows"</font>,{{<font color="red">"market_cap"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">"<font color="blue">date</font>"</font>, <font color="red">"symbol"</font>, <font color="red">"open"</font>, <font color="red">"close"</font>, <font color="red">"market_cap"</font>, <font color="red">"rank"</font>, <font color="red">"ret"</font>, <font color="red">"log_ret"</font>, <font color="red">"code"</font>, <font color="red">"m_cap_cat"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"code"</font>, <font color="red">"cycle"</font>}}),<br></br>    #<font color="red">"Split Column by Character Transition"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Renamed Columns1"</font>, <font color="red">"cycle"</font>, Splitter.SplitTextByCharacterTransition({<font color="red">"0"</font>..<font color="red">"9"</font>}, (c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c)), {<font color="red">"cycle.1"</font>, <font color="red">"cycle.2"</font>}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Split Column by Character Transition"</font>,{<font color="red">"cycle.2"</font>}),<br></br>    #<font color="red">"Split Column by Character Transition1"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Removed Columns"</font>, <font color="red">"cycle.1"</font>, Splitter.SplitTextByCharacterTransition({<font color="red">"0"</font>..<font color="red">"9"</font>}, (c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c)), {<font color="red">"cycle.1.1"</font>, <font color="red">"cycle.1.2"</font>}),<br></br>    #<font color="red">"Split Column by Character Transition2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Split Column by Character Transition1"</font>, <font color="red">"cycle.1.1"</font>, Splitter.SplitTextByCharacterTransition((c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c), {<font color="red">"0"</font>..<font color="red">"9"</font>}), {<font color="red">"cycle.1.1.1"</font>, <font color="red">"cycle.1.1.2"</font>}),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Split Column by Character Transition2"</font>,{<font color="red">"cycle.1.2"</font>}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns1"</font>,{{<font color="red">"cycle.1.1.2"</font>, <font color="red">"cycle_year"</font>}, {<font color="red">"cycle.1.1.1"</font>, <font color="red">"cycle"</font>}, {<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}}),<br></br>    #<font color="red">"Replaced Value"</font> = <font color="purple">Table.ReplaceValue</font>(#<font color="red">"Renamed Columns2"</font>,<font color="red">"NA"</font>,<font color="red">"PreBull"</font>,<font color="purple">Replacer.ReplaceText</font>,{<font color="red">"cycle"</font>}),<br></br>    #<font color="red">"Replaced Value1"</font> = <font color="purple">Table.ReplaceValue</font>(#<font color="red">"Replaced Value"</font>,<font color="blue">null</font>,<font color="red">"2024"</font>,<font color="purple">Replacer.ReplaceValue</font>,{<font color="red">"cycle_year"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Replaced Value1"</font>, {<font color="red">"ticker"</font>}, Crypto_Ticker_Name, {<font color="red">"ticker"</font>}, <font color="red">"Crypto_Ticker_Name"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded Crypto_Ticker_Name"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"Crypto_Ticker_Name"</font>, {<font color="red">"name"</font>}, {<font color="red">"Crypto_Ticker_Name.name"</font>}),<br></br>    #<font color="red">"Renamed Columns3"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded Crypto_Ticker_Name"</font>,{{<font color="red">"Crypto_Ticker_Name.name"</font>, <font color="red">"name"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns3"</font><br></br><br></br><br></br>----------------------<br></br>DateTableTemplate_960e99c0-2c2a-4c19-8100-f6d13eb86238<br></br><br></br>Calendar(Date(2015,1,1), Date(2015,1,1))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_2e506596-e7be-4391-9c4e-520e022e5bb8<br></br><br></br>Calendar(Date(Year(MIN('CryptoMaster'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('CryptoMaster'[<font color="blue">date</font>])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>CryptoMetrics<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\crypto_performance_metrics_ratio.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=8, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Beta"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"average_alpha"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"omega_ratio"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"sortino_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"sharpe_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"max_drawdown"</font>, <font color="blue">type</font> number}, {<font color="red">"latest_alltime"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"latest_alltime"</font>, <font color="purple">Order.Ascending</font>}}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Sorted Rows"</font>,{{<font color="red">"Beta"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"average_alpha"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"omega_ratio"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"sortino_ratio"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"sharpe_ratio"</font>, <font color="purple">Currency.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type1"</font>, {<font color="red">"omega_ratio"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"Beta"</font>, <font color="red">"average_alpha"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Errors1"</font>,{{<font color="red">"max_drawdown"</font>, <font color="purple">Percentage.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type2"</font><br></br><br></br><br></br>----------------------<br></br>CoinAge<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Desktop\powerBI To tableau shift\CoinAge.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=4, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"first_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"coin_age_days"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"coin_class"</font>, <font color="blue">type</font> <font color="blue">text</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_41583ba7-0672-4a9f-90e4-4abe56672745<br></br><br></br>Calendar(Date(Year(MIN('CoinAge'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAge'[first_historical_data])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>ATH<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Desktop\powerBI To tableau shift\RatiosMeasures.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=18, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ATHDate"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Earliest <font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"First coin_age_days"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"First coin_class"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Max of average_alpha"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of Beta"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of omega_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of sharpe_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of sortino_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of todate_return"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Sum of max_drawdown"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Sum of close"</font>, <font color="blue">type</font> number}, {<font color="red">" ATH "</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ATHDays"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"Last mcapcat"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"BTCCorr"</font>, <font color="blue">type</font> number}, {<font color="red">"ETHCorr"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([ATHDate] <> <font color="blue">null</font>) and ([Earliest <font color="blue">date</font>] = #<font color="blue">date</font>(2024, 4, 25)) and ([First coin_age_days] <> <font color="blue">null</font>)),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Filtered Rows"</font>,{<font color="red">"ATHDays"</font>, <font color="red">" ATH "</font>, <font color="red">"Sum of close"</font>, <font color="red">"ATHDate"</font>, <font color="red">"ticker"</font>, <font color="red">"First coin_age_days"</font>, <font color="red">"First coin_class"</font>}),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Removed Other Columns"</font>,{<font color="red">"ticker"</font>, <font color="red">"Sum of close"</font>, <font color="red">" ATH "</font>, <font color="red">"ATHDays"</font>, <font color="red">"First coin_class"</font>, <font color="red">"ATHDate"</font>, <font color="red">"First coin_age_days"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"Sum of close"</font>, <font color="red">"curr_close"</font>}, {<font color="red">" ATH "</font>, <font color="red">"ath"</font>}, {<font color="red">"ATHDays"</font>, <font color="red">"days_s_ath"</font>}, {<font color="red">"First coin_class"</font>, <font color="red">"coin_class"</font>}, {<font color="red">"ATHDate"</font>, <font color="red">"ath_date"</font>}, {<font color="red">"First coin_age_days"</font>, <font color="red">"coin_age"</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Renamed Columns"</font>, <font color="red">"ath"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("$", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"ath.1"</font>, <font color="red">"ath.2"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"ath.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ath.2"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">"ath.1"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"ath.2"</font>, <font color="red">"ath"</font>}}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"ath"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"curr_close"</font>, <font color="purple">Currency.Type</font>}}),<br></br>    #<font color="red">"Reordered Columns1"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Changed Type2"</font>,{<font color="red">"ticker"</font>, <font color="red">"coin_class"</font>, <font color="red">"coin_age"</font>, <font color="red">"curr_close"</font>, <font color="red">"ath"</font>, <font color="red">"days_s_ath"</font>, <font color="red">"ath_date"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Reordered Columns1"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_dfe27dfb-a20d-4bac-941c-f68aeaaa0d2f<br></br><br></br>Calendar(Date(Year(MIN('ATH'[ath_date])), 1, 1), Date(Year(MAX('ATH'[ath_date])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>latest_mcap_crypto<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\latest_mcap_crypto.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=2, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Change Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(#<font color="red">"Change Type"</font>, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"m_cap_cat"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"m_cap_cat"</font>, <font color="purple">Order.Ascending</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Sorted Rows"</font><br></br><br></br><br></br>----------------------<br></br>Crypto_Ticker_Name<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Crypto_Ticker_Name.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column3"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column4"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column5"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column6"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(#<font color="red">"Changed Type"</font>, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">""</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_3"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">""</font>, <font color="red">"_1"</font>, <font color="red">"_2"</font>, <font color="red">"_3"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font><br></br><br></br><br></br>----------------------<br></br>CryptoReturns<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoReturns.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=9, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"<font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"close"</font>, <font color="blue">type</font> number}, {<font color="red">"return_1d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_3d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_7d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_30d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_365d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_730d"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"return_1d"</font>, "%1d"}, {<font color="red">"return_3d"</font>, "%3d"}, {<font color="red">"return_7d"</font>, "%7d"}, {<font color="red">"return_30d"</font>, "%30d"}, {<font color="red">"return_365d"</font>, "%1Y"}, {<font color="red">"return_730d"</font>, "%2Y"}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Renamed Columns"</font>,{<font color="red">"close"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Columns"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_110ffced-6b94-4c4d-ae49-23e2cb108d58<br></br><br></br>Calendar(Date(Year(MIN('CryptoReturns'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('CryptoReturns'[<font color="blue">date</font>])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>IndicesData<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\IndicesData.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=11, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ref_date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"price_open"</font>, <font color="blue">type</font> number}, {<font color="red">"price_high"</font>, <font color="blue">type</font> number}, {<font color="red">"price_low"</font>, <font color="blue">type</font> number}, {<font color="red">"price_close"</font>, <font color="blue">type</font> number}, {<font color="red">"volume"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"price_adjusted"</font>, <font color="blue">type</font> number}, {<font color="red">"ret_adjusted_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ret_closing_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"ref_date"</font>, <font color="red">"<font color="blue">date</font>"</font>}}),<br></br>    #<font color="red">"Trimmed Text"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns"</font>, {{<font color="red">"ticker"</font>, each <font color="purple">Text.Middle</font>(_, 1), <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Trimmed Text"</font>,{<font color="red">"ticker"</font>, <font color="red">"<font color="blue">date</font>"</font>, <font color="red">"price_adjusted"</font>, <font color="red">"volume"</font>, <font color="red">"ret_adjusted_prices"</font>, <font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Removed Other Columns"</font>, each <font color="blue">true</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Filtered Rows"</font>,{{<font color="red">"ret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type1"</font>, {<font color="red">"ret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Errors1"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type2"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-1),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom"</font>,{<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"Custom"</font>, <font color="red">"cumret_adjusted_prices"</font>}}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type3"</font>,{{<font color="red">"price_adjusted"</font>, <font color="red">"close"</font>}, {<font color="red">"ret_adjusted_prices"</font>, <font color="red">"ret"</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="red">"cum_ret"</font>}}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Renamed Columns2"</font>, {<font color="red">"ticker"</font>}, IndicesNameKey, {<font color="red">"ticker"</font>}, <font color="red">"IndicesNameKey"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded IndicesNameKey"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"IndicesNameKey"</font>, {<font color="red">"country"</font>, <font color="red">"index_name"</font>}, {<font color="red">"IndicesNameKey.country"</font>, <font color="red">"IndicesNameKey.index_name"</font>}),<br></br>    #<font color="red">"Renamed Columns3"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded IndicesNameKey"</font>,{{<font color="red">"IndicesNameKey.country"</font>, <font color="red">"country"</font>}, {<font color="red">"IndicesNameKey.index_name"</font>, <font color="red">"IndexName"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns3"</font><br></br><br></br><br></br>----------------------<br></br>IndicesNameKey<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Indices.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=4, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Country"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Index Name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Ticker"</font>, <font color="red">"ticker"</font>}, {<font color="red">"Start Date"</font>, <font color="red">"inceptiondate"</font>}, {<font color="red">"Country"</font>, <font color="red">"country"</font>}, {<font color="red">"Index Name"</font>, <font color="red">"index_name"</font>}}),<br></br>    #<font color="red">"Trimmed Text"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns"</font>, {{<font color="red">"ticker"</font>, each <font color="purple">Text.Middle</font>(_, 1), <font color="blue">type</font> <font color="blue">text</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Trimmed Text"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_7cc56d3f-cef4-43c1-b764-b5f71bfdb25d<br></br><br></br>Calendar(Date(Year(MIN('IndicesNameKey'[inceptiondate])), 1, 1), Date(Year(MAX('IndicesNameKey'[inceptiondate])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>CMCData<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMCData.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=11, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ref_date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"price_open"</font>, <font color="blue">type</font> number}, {<font color="red">"price_high"</font>, <font color="blue">type</font> number}, {<font color="red">"price_low"</font>, <font color="blue">type</font> number}, {<font color="red">"price_close"</font>, <font color="blue">type</font> number}, {<font color="red">"volume"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"price_adjusted"</font>, <font color="blue">type</font> number}, {<font color="red">"ret_adjusted_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ret_closing_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type"</font>,{<font color="red">"price_open"</font>, <font color="red">"price_high"</font>, <font color="red">"price_low"</font>, <font color="red">"price_close"</font>, <font color="red">"volume"</font>, <font color="red">"ret_closing_prices"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"ret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type1"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-100),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Added Custom"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type2"</font>,{<font color="red">"Custom"</font>}),<br></br>    #<font color="red">"Added Custom1"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Removed Columns1"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-1),<br></br>    #<font color="red">"Removed Columns2"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom1"</font>,{<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns2"</font>,{{<font color="red">"Custom"</font>, <font color="red">"cum_ret"</font>}, {<font color="red">"ret_adjusted_prices"</font>, <font color="red">"ret"</font>}, {<font color="red">"price_adjusted"</font>, <font color="red">"close"</font>}}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"cum_ret"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type3"</font>, {<font color="red">"ret"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"cum_ret"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Removed Errors1"</font>, {<font color="red">"ticker"</font>}, CMC, {<font color="red">"Ticker"</font>}, <font color="red">"CMC"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded CMC"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"CMC"</font>, {<font color="red">"CMC"</font>}, {<font color="red">"CMC.CMC"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded CMC"</font>,{{<font color="red">"CMC.CMC"</font>, <font color="red">"CMC"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns1"</font><br></br><br></br><br></br>----------------------<br></br>CMC<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMC.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=2, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Column1"</font>, <font color="red">"CMC"</font>}, {<font color="red">"Column2"</font>, <font color="red">"Ticker"</font>}}),<br></br>    #<font color="red">"Removed Top Rows"</font> = <font color="purple">Table.Skip</font>(#<font color="red">"Renamed Columns"</font>,1)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Top Rows"</font><br></br><br></br><br></br>----------------------<br></br>corrdata_btc_indices<br></br><br></br><br></br>UNION(<br></br>    SELECTCOLUMNS(<br></br>        FILTER(<br></br>            CryptoMaster,<br></br>            CryptoMaster[ticker] IN {<font color="red">"btc"</font>, <font color="red">"eth"</font>}<br></br>        ),<br></br>        <font color="red">"ticker"</font>, CryptoMaster[ticker],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CryptoMaster[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, CryptoMaster[close]<br></br>    ),<br></br>    SELECTCOLUMNS(<br></br>        IndicesData,<br></br>        <font color="red">"ticker"</font>, IndicesData[IndexName],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, IndicesData[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, IndicesData[close]<br></br>    )<br></br>)<br></br><br></br><br></br><br></br>----------------------<br></br>corrdata_crypto_CMC<br></br><br></br><br></br>UNION(<br></br>    SELECTCOLUMNS(<br></br>        CMCdata,<br></br>        <font color="red">"ticker"</font>, CMCData[CMC],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CMCdata[ref_date],<br></br>        <font color="red">"close"</font>, CMCdata[close]<br></br>    ),<br></br>    SELECTCOLUMNS(<br></br>        FILTER(<br></br>            CryptoMaster,<br></br>            CryptoMaster[ticker] IN {<font color="red">"btc"</font>, <font color="red">"eth"</font>}<br></br>        ),<br></br>        <font color="red">"ticker"</font>, CryptoMaster[ticker],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CryptoMaster[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, CryptoMaster[close]<br></br>    )<br></br>)<br></br><br></br><br></br><br></br>----------------------<br></br>CoinAgeTimelineData<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\DATA\Crypto\DataCryptoMaster1.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=8, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"id"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"rank"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"slug"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"is_active"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"first_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"last_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Changed Type"</font>, {<font color="red">"symbol"</font>}, CoinAge, {<font color="red">"ticker"</font>}, <font color="red">"CoinAge"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded CoinAge1"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"CoinAge"</font>, {<font color="red">"coin_age_days"</font>, <font color="red">"coin_class"</font>}, {<font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"CoinAge.coin_class"</font>}),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Expanded CoinAge1"</font>,{<font color="red">"symbol"</font>, <font color="red">"slug"</font>, <font color="red">"first_historical_data"</font>, <font color="red">"last_historical_data"</font>, <font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"CoinAge.coin_class"</font>}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Removed Other Columns"</font>, each [CoinAge.coin_class] <> <font color="blue">null</font> and [CoinAge.coin_class] <> <font color="red">""</font>),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Filtered Rows"</font>,{{<font color="red">"CoinAge.coin_class"</font>, <font color="red">"class"</font>}, {<font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"coin_age_days"</font>}, {<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}}),<br></br>    #<font color="red">"Merged Queries1"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Renamed Columns"</font>, {<font color="red">"ticker"</font>}, latest_mcap_crypto, {<font color="red">"ticker"</font>}, <font color="red">"latest_mcap_crypto"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded latest_mcap_crypto"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries1"</font>, <font color="red">"latest_mcap_crypto"</font>, {<font color="red">"m_cap_cat"</font>}, {<font color="red">"latest_mcap_crypto.m_cap_cat"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded latest_mcap_crypto"</font>,{{<font color="red">"latest_mcap_crypto.m_cap_cat"</font>, <font color="red">"m_cap_cat"</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"m_cap_cat"</font>, <font color="purple">Order.Ascending</font>}}),<br></br>    #<font color="red">"Filtered Rows1"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Sorted Rows"</font>, each [m_cap_cat] <> <font color="blue">null</font> and [m_cap_cat] <> <font color="red">""</font>),<br></br>    #<font color="red">"Merged Queries2"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Filtered Rows1"</font>, {<font color="red">"ticker"</font>}, CryptoMetrics, {<font color="red">"ticker"</font>}, <font color="red">"CryptoMaster"</font>, <font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded CryptoMaster1"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries2"</font>, <font color="red">"CryptoMaster"</font>, {<font color="red">"omega_ratio"</font>, <font color="red">"max_drawdown"</font>, <font color="red">"latest_alltime"</font>}, {<font color="red">"CryptoMaster.omega_ratio"</font>, <font color="red">"CryptoMaster.max_drawdown"</font>, <font color="red">"CryptoMaster.latest_alltime"</font>}),<br></br>    #<font color="red">"Filtered Rows2"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Expanded CryptoMaster1"</font>, each [CryptoMaster.omega_ratio] <> <font color="blue">null</font> and [CryptoMaster.omega_ratio] <> <font color="red">""</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Filtered Rows2"</font>,{{<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Sorted Rows1"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type1"</font>,{{<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Sorted Rows1"</font>,{{<font color="red">"CryptoMaster.omega_ratio"</font>, <font color="red">"omega_ratio"</font>}, {<font color="red">"CryptoMaster.max_drawdown"</font>, <font color="red">"drawdown"</font>}, {<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="red">"alltime"</font>}}),<br></br>    #<font color="red">"Filtered Rows3"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Renamed Columns2"</font>, each [drawdown] <> <font color="blue">null</font> and [drawdown] <> <font color="red">""</font>),<br></br>    #<font color="red">"Filtered Rows4"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows3"</font>, each [drawdown] < 0.88),<br></br>    #<font color="red">"Filtered Rows5"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows4"</font>, each [omega_ratio] > 0.88),<br></br>    #<font color="red">"Filtered Rows6"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows5"</font>, each [alltime] > 0),<br></br>    #<font color="red">"Removed Duplicates"</font> = <font color="purple">Table.Distinct</font>(#<font color="red">"Filtered Rows6"</font>, {<font color="red">"slug"</font>}),<br></br>    #<font color="red">"Sorted Rows2"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Removed Duplicates"</font>,{{<font color="red">"omega_ratio"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Filtered Rows7"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Sorted Rows2"</font>, each ([class] <> "gen_z+")),<br></br>    #<font color="red">"Sorted Rows3"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Filtered Rows7"</font>,{{<font color="red">"class"</font>, <font color="purple">Order.Ascending</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Sorted Rows3"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_f791921f-5099-494e-b1d4-0853865d8a4b<br></br><br></br>Calendar(Date(Year(MIN('CoinAgeTimelineData'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[first_historical_data])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_05dcca00-8f1b-4c37-a3cd-46e3b7d99673<br></br><br></br>Calendar(Date(Year(MIN('CoinAgeTimelineData'[last_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[last_historical_data])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>NewsandEvents<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"End Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Period"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Biggest Event"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Description"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Event Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([Start Date] <> <font color="blue">null</font>))<br></br><font color="blue">in</font><br></br>    #<font color="red">"Filtered Rows"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_e857162e-536b-4af3-acb1-f62f3d4d34b0<br></br><br></br>Calendar(Date(Year(MIN('NewsandEvents'[Start Date])), 1, 1), Date(Year(MAX('NewsandEvents'[Start Date])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_19718fcf-f857-4eaa-b26f-88b66c4f1321<br></br><br></br>Calendar(Date(Year(MIN('NewsandEvents'[End Date])), 1, 1), Date(Year(MAX('NewsandEvents'[End Date])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>Period<br></br><br></br><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"End Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Period"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Biggest Event"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Description"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Event Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([Start Date] <> <font color="blue">null</font>)),<br></br>    #<font color="red">"Removed Bottom Rows"</font> = <font color="purple">Table.RemoveLastN</font>(#<font color="red">"Filtered Rows"</font>,4),<br></br>    #<font color="red">"Removed Bottom Rows1"</font> = <font color="purple">Table.RemoveLastN</font>(#<font color="red">"Removed Bottom Rows"</font>,3)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Bottom Rows1"</font><br></br><br></br><br></br>----------------------<br></br>LocalDateTable_ef645a16-ad19-4fb1-ae46-3bd06535ca8c<br></br><br></br>Calendar(Date(Year(MIN('Period'[Event Date])), 1, 1), Date(Year(MAX('Period'[Event Date])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_d886f37f-43f4-4e9f-a311-1d6702e055d6<br></br><br></br>Calendar(Date(Year(MIN('Period'[End Date])), 1, 1), Date(Year(MAX('Period'[End Date])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_73b926ee-758b-4a1e-b69d-b3b34fe80f4d<br></br><br></br>Calendar(Date(Year(MIN('corrdata_crypto_CMC'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('corrdata_crypto_CMC'[<font color="blue">date</font>])), 12, 31))<br></br><br></br><br></br>----------------------<br></br>LocalDateTable_c8075966-ebf8-4edc-a62c-dcf4bd8866df<br></br><br></br>Calendar(Date(Year(MIN('corrdata_btc_indices'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('corrdata_btc_indices'[<font color="blue">date</font>])), 12, 31))<br></br><br></br><br></br>----------------------<br></br></font></div><br></br><hr></hr><br></br><h3><div>Partitions:</div></h3><br></br><table border='1px' cellpadding='1' cellspacing='1' bgcolor='lightyellow' style='font-family:Garamond; font-size:18'><tr ><td >Name</td><td >QueryDefinition</td></tr><tr ><td >CryptoMaster</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoMasterFile.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=10, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"<font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"open"</font>, <font color="blue">type</font> number}, {<font color="red">"close"</font>, <font color="blue">type</font> number}, {<font color="red">"market_cap"</font>, <font color="blue">type</font> number}, {<font color="red">"rank"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"ret"</font>, <font color="blue">type</font> number}, {<font color="red">"log_ret"</font>, <font color="blue">type</font> number}, {<font color="red">"Code"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"mcapcat"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Code"</font>, <font color="red">"code"</font>}, {<font color="red">"mcapcat"</font>, <font color="red">"m_cap_cat"</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"close"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Sorted Rows"</font>,{{<font color="red">"market_cap"</font>, <font color="purple">Int64.Type</font>}}),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">"<font color="blue">date</font>"</font>, <font color="red">"symbol"</font>, <font color="red">"open"</font>, <font color="red">"close"</font>, <font color="red">"market_cap"</font>, <font color="red">"rank"</font>, <font color="red">"ret"</font>, <font color="red">"log_ret"</font>, <font color="red">"code"</font>, <font color="red">"m_cap_cat"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"code"</font>, <font color="red">"cycle"</font>}}),<br></br>    #<font color="red">"Split Column by Character Transition"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Renamed Columns1"</font>, <font color="red">"cycle"</font>, Splitter.SplitTextByCharacterTransition({<font color="red">"0"</font>..<font color="red">"9"</font>}, (c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c)), {<font color="red">"cycle.1"</font>, <font color="red">"cycle.2"</font>}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Split Column by Character Transition"</font>,{<font color="red">"cycle.2"</font>}),<br></br>    #<font color="red">"Split Column by Character Transition1"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Removed Columns"</font>, <font color="red">"cycle.1"</font>, Splitter.SplitTextByCharacterTransition({<font color="red">"0"</font>..<font color="red">"9"</font>}, (c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c)), {<font color="red">"cycle.1.1"</font>, <font color="red">"cycle.1.2"</font>}),<br></br>    #<font color="red">"Split Column by Character Transition2"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Split Column by Character Transition1"</font>, <font color="red">"cycle.1.1"</font>, Splitter.SplitTextByCharacterTransition((c) => not <font color="purple">List.Contains</font>({<font color="red">"0"</font>..<font color="red">"9"</font>}, c), {<font color="red">"0"</font>..<font color="red">"9"</font>}), {<font color="red">"cycle.1.1.1"</font>, <font color="red">"cycle.1.1.2"</font>}),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Split Column by Character Transition2"</font>,{<font color="red">"cycle.1.2"</font>}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns1"</font>,{{<font color="red">"cycle.1.1.2"</font>, <font color="red">"cycle_year"</font>}, {<font color="red">"cycle.1.1.1"</font>, <font color="red">"cycle"</font>}, {<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}}),<br></br>    #<font color="red">"Replaced Value"</font> = <font color="purple">Table.ReplaceValue</font>(#<font color="red">"Renamed Columns2"</font>,<font color="red">"NA"</font>,<font color="red">"PreBull"</font>,<font color="purple">Replacer.ReplaceText</font>,{<font color="red">"cycle"</font>}),<br></br>    #<font color="red">"Replaced Value1"</font> = <font color="purple">Table.ReplaceValue</font>(#<font color="red">"Replaced Value"</font>,<font color="blue">null</font>,<font color="red">"2024"</font>,<font color="purple">Replacer.ReplaceValue</font>,{<font color="red">"cycle_year"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Replaced Value1"</font>, {<font color="red">"ticker"</font>}, Crypto_Ticker_Name, {<font color="red">"ticker"</font>}, <font color="red">"Crypto_Ticker_Name"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded Crypto_Ticker_Name"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"Crypto_Ticker_Name"</font>, {<font color="red">"name"</font>}, {<font color="red">"Crypto_Ticker_Name.name"</font>}),<br></br>    #<font color="red">"Renamed Columns3"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded Crypto_Ticker_Name"</font>,{{<font color="red">"Crypto_Ticker_Name.name"</font>, <font color="red">"name"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns3"</font></td></tr><tr ><td >DateTableTemplate_960e99c0-2c2a-4c19-8100-f6d13eb86238</td><td >Calendar(Date(2015,1,1), Date(2015,1,1))</td></tr><tr ><td >LocalDateTable_2e506596-e7be-4391-9c4e-520e022e5bb8</td><td >Calendar(Date(Year(MIN('CryptoMaster'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('CryptoMaster'[<font color="blue">date</font>])), 12, 31))</td></tr><tr ><td >CryptoMetrics</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\crypto_performance_metrics_ratio.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=8, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Beta"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"average_alpha"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"omega_ratio"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"sortino_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"sharpe_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"max_drawdown"</font>, <font color="blue">type</font> number}, {<font color="red">"latest_alltime"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"latest_alltime"</font>, <font color="purple">Order.Ascending</font>}}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Sorted Rows"</font>,{{<font color="red">"Beta"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"average_alpha"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"omega_ratio"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"sortino_ratio"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"sharpe_ratio"</font>, <font color="purple">Currency.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type1"</font>, {<font color="red">"omega_ratio"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"Beta"</font>, <font color="red">"average_alpha"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Errors1"</font>,{{<font color="red">"max_drawdown"</font>, <font color="purple">Percentage.Type</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type2"</font></td></tr><tr ><td >CoinAge</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Desktop\powerBI To tableau shift\CoinAge.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=4, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"first_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"coin_age_days"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"coin_class"</font>, <font color="blue">type</font> <font color="blue">text</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Changed Type"</font></td></tr><tr ><td >LocalDateTable_41583ba7-0672-4a9f-90e4-4abe56672745</td><td >Calendar(Date(Year(MIN('CoinAge'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAge'[first_historical_data])), 12, 31))</td></tr><tr ><td >ATH</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Desktop\powerBI To tableau shift\RatiosMeasures.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=18, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ATHDate"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Earliest <font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"First coin_age_days"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"First coin_class"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Max of average_alpha"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of Beta"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of omega_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of sharpe_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of sortino_ratio"</font>, <font color="blue">type</font> number}, {<font color="red">"Sum of todate_return"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Sum of max_drawdown"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"Sum of close"</font>, <font color="blue">type</font> number}, {<font color="red">" ATH "</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ATHDays"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"Last mcapcat"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"BTCCorr"</font>, <font color="blue">type</font> number}, {<font color="red">"ETHCorr"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([ATHDate] <> <font color="blue">null</font>) and ([Earliest <font color="blue">date</font>] = #<font color="blue">date</font>(2024, 4, 25)) and ([First coin_age_days] <> <font color="blue">null</font>)),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Filtered Rows"</font>,{<font color="red">"ATHDays"</font>, <font color="red">" ATH "</font>, <font color="red">"Sum of close"</font>, <font color="red">"ATHDate"</font>, <font color="red">"ticker"</font>, <font color="red">"First coin_age_days"</font>, <font color="red">"First coin_class"</font>}),<br></br>    #<font color="red">"Reordered Columns"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Removed Other Columns"</font>,{<font color="red">"ticker"</font>, <font color="red">"Sum of close"</font>, <font color="red">" ATH "</font>, <font color="red">"ATHDays"</font>, <font color="red">"First coin_class"</font>, <font color="red">"ATHDate"</font>, <font color="red">"First coin_age_days"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Reordered Columns"</font>,{{<font color="red">"Sum of close"</font>, <font color="red">"curr_close"</font>}, {<font color="red">" ATH "</font>, <font color="red">"ath"</font>}, {<font color="red">"ATHDays"</font>, <font color="red">"days_s_ath"</font>}, {<font color="red">"First coin_class"</font>, <font color="red">"coin_class"</font>}, {<font color="red">"ATHDate"</font>, <font color="red">"ath_date"</font>}, {<font color="red">"First coin_age_days"</font>, <font color="red">"coin_age"</font>}}),<br></br>    #<font color="red">"Split Column by Delimiter"</font> = <font color="purple">Table.Split</font>Column(#<font color="red">"Renamed Columns"</font>, <font color="red">"ath"</font>, <font color="purple">Splitter.SplitTextByDelimiter</font>("$", <font color="purple">QuoteStyle.Csv</font>), {<font color="red">"ath.1"</font>, <font color="red">"ath.2"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Split Column by Delimiter"</font>,{{<font color="red">"ath.1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ath.2"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">"ath.1"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"ath.2"</font>, <font color="red">"ath"</font>}}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"ath"</font>, <font color="purple">Currency.Type</font>}, {<font color="red">"curr_close"</font>, <font color="purple">Currency.Type</font>}}),<br></br>    #<font color="red">"Reordered Columns1"</font> = <font color="purple">Table.ReorderColumns</font>(#<font color="red">"Changed Type2"</font>,{<font color="red">"ticker"</font>, <font color="red">"coin_class"</font>, <font color="red">"coin_age"</font>, <font color="red">"curr_close"</font>, <font color="red">"ath"</font>, <font color="red">"days_s_ath"</font>, <font color="red">"ath_date"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Reordered Columns1"</font></td></tr><tr ><td >LocalDateTable_dfe27dfb-a20d-4bac-941c-f68aeaaa0d2f</td><td >Calendar(Date(Year(MIN('ATH'[ath_date])), 1, 1), Date(Year(MAX('ATH'[ath_date])), 12, 31))</td></tr><tr ><td >latest_mcap_crypto</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\latest_mcap_crypto.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=2, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Change Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(#<font color="red">"Change Type"</font>, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"m_cap_cat"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"m_cap_cat"</font>, <font color="purple">Order.Ascending</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Sorted Rows"</font></td></tr><tr ><td >Crypto_Ticker_Name</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Crypto_Ticker_Name.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column3"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column4"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column5"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column6"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(#<font color="red">"Changed Type"</font>, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">""</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_2"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"_3"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type1"</font>,{<font color="red">""</font>, <font color="red">"_1"</font>, <font color="red">"_2"</font>, <font color="red">"_3"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns"</font></td></tr><tr ><td >CryptoReturns</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CryptoReturns.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=9, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"<font color="blue">date</font>"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"close"</font>, <font color="blue">type</font> number}, {<font color="red">"return_1d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_3d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_7d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_30d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_365d"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"return_730d"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"return_1d"</font>, "%1d"}, {<font color="red">"return_3d"</font>, "%3d"}, {<font color="red">"return_7d"</font>, "%7d"}, {<font color="red">"return_30d"</font>, "%30d"}, {<font color="red">"return_365d"</font>, "%1Y"}, {<font color="red">"return_730d"</font>, "%2Y"}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Renamed Columns"</font>,{<font color="red">"close"</font>})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Columns"</font></td></tr><tr ><td >LocalDateTable_110ffced-6b94-4c4d-ae49-23e2cb108d58</td><td >Calendar(Date(Year(MIN('CryptoReturns'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('CryptoReturns'[<font color="blue">date</font>])), 12, 31))</td></tr><tr ><td >IndicesData</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\IndicesData.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=11, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ref_date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"price_open"</font>, <font color="blue">type</font> number}, {<font color="red">"price_high"</font>, <font color="blue">type</font> number}, {<font color="red">"price_low"</font>, <font color="blue">type</font> number}, {<font color="red">"price_close"</font>, <font color="blue">type</font> number}, {<font color="red">"volume"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"price_adjusted"</font>, <font color="blue">type</font> number}, {<font color="red">"ret_adjusted_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ret_closing_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"ref_date"</font>, <font color="red">"<font color="blue">date</font>"</font>}}),<br></br>    #<font color="red">"Trimmed Text"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns"</font>, {{<font color="red">"ticker"</font>, each <font color="purple">Text.Middle</font>(_, 1), <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Trimmed Text"</font>,{<font color="red">"ticker"</font>, <font color="red">"<font color="blue">date</font>"</font>, <font color="red">"price_adjusted"</font>, <font color="red">"volume"</font>, <font color="red">"ret_adjusted_prices"</font>, <font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Removed Other Columns"</font>, each <font color="blue">true</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Filtered Rows"</font>,{{<font color="red">"ret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type1"</font>, {<font color="red">"ret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Errors1"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type2"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-1),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom"</font>,{<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"Custom"</font>, <font color="red">"cumret_adjusted_prices"</font>}}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type3"</font>,{{<font color="red">"price_adjusted"</font>, <font color="red">"close"</font>}, {<font color="red">"ret_adjusted_prices"</font>, <font color="red">"ret"</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="red">"cum_ret"</font>}}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Renamed Columns2"</font>, {<font color="red">"ticker"</font>}, IndicesNameKey, {<font color="red">"ticker"</font>}, <font color="red">"IndicesNameKey"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded IndicesNameKey"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"IndicesNameKey"</font>, {<font color="red">"country"</font>, <font color="red">"index_name"</font>}, {<font color="red">"IndicesNameKey.country"</font>, <font color="red">"IndicesNameKey.index_name"</font>}),<br></br>    #<font color="red">"Renamed Columns3"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded IndicesNameKey"</font>,{{<font color="red">"IndicesNameKey.country"</font>, <font color="red">"country"</font>}, {<font color="red">"IndicesNameKey.index_name"</font>, <font color="red">"IndexName"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns3"</font></td></tr><tr ><td >IndicesNameKey</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\Indices.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=4, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Country"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Index Name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Ticker"</font>, <font color="red">"ticker"</font>}, {<font color="red">"Start Date"</font>, <font color="red">"inceptiondate"</font>}, {<font color="red">"Country"</font>, <font color="red">"country"</font>}, {<font color="red">"Index Name"</font>, <font color="red">"index_name"</font>}}),<br></br>    #<font color="red">"Trimmed Text"</font> = <font color="purple">Table.TransformColumns</font>(#<font color="red">"Renamed Columns"</font>, {{<font color="red">"ticker"</font>, each <font color="purple">Text.Middle</font>(_, 1), <font color="blue">type</font> <font color="blue">text</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Trimmed Text"</font></td></tr><tr ><td >LocalDateTable_7cc56d3f-cef4-43c1-b764-b5f71bfdb25d</td><td >Calendar(Date(Year(MIN('IndicesNameKey'[inceptiondate])), 1, 1), Date(Year(MAX('IndicesNameKey'[inceptiondate])), 12, 31))</td></tr><tr ><td >CMCData</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMCData.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=11, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"ticker"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ref_date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"price_open"</font>, <font color="blue">type</font> number}, {<font color="red">"price_high"</font>, <font color="blue">type</font> number}, {<font color="red">"price_low"</font>, <font color="blue">type</font> number}, {<font color="red">"price_close"</font>, <font color="blue">type</font> number}, {<font color="red">"volume"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"price_adjusted"</font>, <font color="blue">type</font> number}, {<font color="red">"ret_adjusted_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"ret_closing_prices"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type"</font>,{<font color="red">"price_open"</font>, <font color="red">"price_high"</font>, <font color="red">"price_low"</font>, <font color="red">"price_close"</font>, <font color="red">"volume"</font>, <font color="red">"ret_closing_prices"</font>}),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Removed Columns"</font>,{{<font color="red">"ret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}, {<font color="red">"cumret_adjusted_prices"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Added Custom"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Changed Type1"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-100),<br></br>    #<font color="red">"Changed Type2"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Added Custom"</font>,{{<font color="red">"cumret_adjusted_prices"</font>, <font color="blue">type</font> number}}),<br></br>    #<font color="red">"Removed Columns1"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Changed Type2"</font>,{<font color="red">"Custom"</font>}),<br></br>    #<font color="red">"Added Custom1"</font> = <font color="purple">Table.AddColumn</font>(#<font color="red">"Removed Columns1"</font>, <font color="red">"Custom"</font>, each [cumret_adjusted_prices]-1),<br></br>    #<font color="red">"Removed Columns2"</font> = <font color="purple">Table.RemoveColumns</font>(#<font color="red">"Added Custom1"</font>,{<font color="red">"cumret_adjusted_prices"</font>}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Removed Columns2"</font>,{{<font color="red">"Custom"</font>, <font color="red">"cum_ret"</font>}, {<font color="red">"ret_adjusted_prices"</font>, <font color="red">"ret"</font>}, {<font color="red">"price_adjusted"</font>, <font color="red">"close"</font>}}),<br></br>    #<font color="red">"Changed Type3"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Renamed Columns"</font>,{{<font color="red">"cum_ret"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Removed Errors"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Changed Type3"</font>, {<font color="red">"ret"</font>}),<br></br>    #<font color="red">"Removed Errors1"</font> = <font color="purple">Table.RemoveRows</font>WithErrors(#<font color="red">"Removed Errors"</font>, {<font color="red">"cum_ret"</font>}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Removed Errors1"</font>, {<font color="red">"ticker"</font>}, CMC, {<font color="red">"Ticker"</font>}, <font color="red">"CMC"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded CMC"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"CMC"</font>, {<font color="red">"CMC"</font>}, {<font color="red">"CMC.CMC"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded CMC"</font>,{{<font color="red">"CMC.CMC"</font>, <font color="red">"CMC"</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Renamed Columns1"</font></td></tr><tr ><td >CMC</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\CMC.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=2, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(Source,{{<font color="red">"Column1"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Column2"</font>, <font color="blue">type</font> <font color="blue">text</font>}}),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Changed Type"</font>,{{<font color="red">"Column1"</font>, <font color="red">"CMC"</font>}, {<font color="red">"Column2"</font>, <font color="red">"Ticker"</font>}}),<br></br>    #<font color="red">"Removed Top Rows"</font> = <font color="purple">Table.Skip</font>(#<font color="red">"Renamed Columns"</font>,1)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Top Rows"</font></td></tr><tr ><td >corrdata_btc_indices</td><td ><br></br>UNION(<br></br>    SELECTCOLUMNS(<br></br>        FILTER(<br></br>            CryptoMaster,<br></br>            CryptoMaster[ticker] IN {<font color="red">"btc"</font>, <font color="red">"eth"</font>}<br></br>        ),<br></br>        <font color="red">"ticker"</font>, CryptoMaster[ticker],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CryptoMaster[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, CryptoMaster[close]<br></br>    ),<br></br>    SELECTCOLUMNS(<br></br>        IndicesData,<br></br>        <font color="red">"ticker"</font>, IndicesData[IndexName],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, IndicesData[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, IndicesData[close]<br></br>    )<br></br>)<br></br></td></tr><tr ><td >corrdata_crypto_CMC</td><td ><br></br>UNION(<br></br>    SELECTCOLUMNS(<br></br>        CMCdata,<br></br>        <font color="red">"ticker"</font>, CMCData[CMC],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CMCdata[ref_date],<br></br>        <font color="red">"close"</font>, CMCdata[close]<br></br>    ),<br></br>    SELECTCOLUMNS(<br></br>        FILTER(<br></br>            CryptoMaster,<br></br>            CryptoMaster[ticker] IN {<font color="red">"btc"</font>, <font color="red">"eth"</font>}<br></br>        ),<br></br>        <font color="red">"ticker"</font>, CryptoMaster[ticker],<br></br>        <font color="red">"<font color="blue">date</font>"</font>, CryptoMaster[<font color="blue">date</font>],<br></br>        <font color="red">"close"</font>, CryptoMaster[close]<br></br>    )<br></br>)<br></br></td></tr><tr ><td >CoinAgeTimelineData</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDataFetcher\CryptoDataFetcher2.0\DATA\Crypto\DataCryptoMaster1.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=8, Encoding=65001, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"id"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"rank"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"name"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"symbol"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"slug"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"is_active"</font>, <font color="purple">Int64.Type</font>}, {<font color="red">"first_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"last_historical_data"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Merged Queries"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Changed Type"</font>, {<font color="red">"symbol"</font>}, CoinAge, {<font color="red">"ticker"</font>}, <font color="red">"CoinAge"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded CoinAge1"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries"</font>, <font color="red">"CoinAge"</font>, {<font color="red">"coin_age_days"</font>, <font color="red">"coin_class"</font>}, {<font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"CoinAge.coin_class"</font>}),<br></br>    #<font color="red">"Removed Other Columns"</font> = <font color="purple">Table.SelectColumns</font>(#<font color="red">"Expanded CoinAge1"</font>,{<font color="red">"symbol"</font>, <font color="red">"slug"</font>, <font color="red">"first_historical_data"</font>, <font color="red">"last_historical_data"</font>, <font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"CoinAge.coin_class"</font>}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Removed Other Columns"</font>, each [CoinAge.coin_class] <> <font color="blue">null</font> and [CoinAge.coin_class] <> <font color="red">""</font>),<br></br>    #<font color="red">"Renamed Columns"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Filtered Rows"</font>,{{<font color="red">"CoinAge.coin_class"</font>, <font color="red">"class"</font>}, {<font color="red">"CoinAge.coin_age_days"</font>, <font color="red">"coin_age_days"</font>}, {<font color="red">"symbol"</font>, <font color="red">"ticker"</font>}}),<br></br>    #<font color="red">"Merged Queries1"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Renamed Columns"</font>, {<font color="red">"ticker"</font>}, latest_mcap_crypto, {<font color="red">"ticker"</font>}, <font color="red">"latest_mcap_crypto"</font>, <font color="purple">JoinKind.LeftOuter</font>),<br></br>    #<font color="red">"Expanded latest_mcap_crypto"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries1"</font>, <font color="red">"latest_mcap_crypto"</font>, {<font color="red">"m_cap_cat"</font>}, {<font color="red">"latest_mcap_crypto.m_cap_cat"</font>}),<br></br>    #<font color="red">"Renamed Columns1"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Expanded latest_mcap_crypto"</font>,{{<font color="red">"latest_mcap_crypto.m_cap_cat"</font>, <font color="red">"m_cap_cat"</font>}}),<br></br>    #<font color="red">"Sorted Rows"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Renamed Columns1"</font>,{{<font color="red">"m_cap_cat"</font>, <font color="purple">Order.Ascending</font>}}),<br></br>    #<font color="red">"Filtered Rows1"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Sorted Rows"</font>, each [m_cap_cat] <> <font color="blue">null</font> and [m_cap_cat] <> <font color="red">""</font>),<br></br>    #<font color="red">"Merged Queries2"</font> = <font color="purple">Table.NestedJoin</font>(#<font color="red">"Filtered Rows1"</font>, {<font color="red">"ticker"</font>}, CryptoMetrics, {<font color="red">"ticker"</font>}, <font color="red">"CryptoMaster"</font>, <font color="purple">JoinKind.Inner</font>),<br></br>    #<font color="red">"Expanded CryptoMaster1"</font> = <font color="purple">Table.ExpandTableColumn</font>(#<font color="red">"Merged Queries2"</font>, <font color="red">"CryptoMaster"</font>, {<font color="red">"omega_ratio"</font>, <font color="red">"max_drawdown"</font>, <font color="red">"latest_alltime"</font>}, {<font color="red">"CryptoMaster.omega_ratio"</font>, <font color="red">"CryptoMaster.max_drawdown"</font>, <font color="red">"CryptoMaster.latest_alltime"</font>}),<br></br>    #<font color="red">"Filtered Rows2"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Expanded CryptoMaster1"</font>, each [CryptoMaster.omega_ratio] <> <font color="blue">null</font> and [CryptoMaster.omega_ratio] <> <font color="red">""</font>),<br></br>    #<font color="red">"Changed Type1"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Filtered Rows2"</font>,{{<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="purple">Percentage.Type</font>}}),<br></br>    #<font color="red">"Sorted Rows1"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Changed Type1"</font>,{{<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Renamed Columns2"</font> = <font color="purple">Table.RenameColumns</font>(#<font color="red">"Sorted Rows1"</font>,{{<font color="red">"CryptoMaster.omega_ratio"</font>, <font color="red">"omega_ratio"</font>}, {<font color="red">"CryptoMaster.max_drawdown"</font>, <font color="red">"drawdown"</font>}, {<font color="red">"CryptoMaster.latest_alltime"</font>, <font color="red">"alltime"</font>}}),<br></br>    #<font color="red">"Filtered Rows3"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Renamed Columns2"</font>, each [drawdown] <> <font color="blue">null</font> and [drawdown] <> <font color="red">""</font>),<br></br>    #<font color="red">"Filtered Rows4"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows3"</font>, each [drawdown] < 0.88),<br></br>    #<font color="red">"Filtered Rows5"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows4"</font>, each [omega_ratio] > 0.88),<br></br>    #<font color="red">"Filtered Rows6"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Filtered Rows5"</font>, each [alltime] > 0),<br></br>    #<font color="red">"Removed Duplicates"</font> = <font color="purple">Table.Distinct</font>(#<font color="red">"Filtered Rows6"</font>, {<font color="red">"slug"</font>}),<br></br>    #<font color="red">"Sorted Rows2"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Removed Duplicates"</font>,{{<font color="red">"omega_ratio"</font>, <font color="purple">Order.Descending</font>}}),<br></br>    #<font color="red">"Filtered Rows7"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Sorted Rows2"</font>, each ([class] <> "gen_z+")),<br></br>    #<font color="red">"Sorted Rows3"</font> = <font color="purple">Table.Sort</font>(#<font color="red">"Filtered Rows7"</font>,{{<font color="red">"class"</font>, <font color="purple">Order.Ascending</font>}})<br></br><font color="blue">in</font><br></br>    #<font color="red">"Sorted Rows3"</font></td></tr><tr ><td >LocalDateTable_f791921f-5099-494e-b1d4-0853865d8a4b</td><td >Calendar(Date(Year(MIN('CoinAgeTimelineData'[first_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[first_historical_data])), 12, 31))</td></tr><tr ><td >LocalDateTable_05dcca00-8f1b-4c37-a3cd-46e3b7d99673</td><td >Calendar(Date(Year(MIN('CoinAgeTimelineData'[last_historical_data])), 1, 1), Date(Year(MAX('CoinAgeTimelineData'[last_historical_data])), 12, 31))</td></tr><tr ><td >NewsandEvents</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"End Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Period"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Biggest Event"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Description"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Event Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([Start Date] <> <font color="blue">null</font>))<br></br><font color="blue">in</font><br></br>    #<font color="red">"Filtered Rows"</font></td></tr><tr ><td >LocalDateTable_e857162e-536b-4af3-acb1-f62f3d4d34b0</td><td >Calendar(Date(Year(MIN('NewsandEvents'[Start Date])), 1, 1), Date(Year(MAX('NewsandEvents'[Start Date])), 12, 31))</td></tr><tr ><td >LocalDateTable_19718fcf-f857-4eaa-b26f-88b66c4f1321</td><td >Calendar(Date(Year(MIN('NewsandEvents'[End Date])), 1, 1), Date(Year(MAX('NewsandEvents'[End Date])), 12, 31))</td></tr><tr ><td >Period</td><td ><font color="blue">let</font><br></br>    Source = <font color="purple">Csv.Document</font>(<font color="purple">File.Contents</font>(<font color="red">"C:\Users\44776\Documents\GitHub\CryptoDashboardPitch\Data FIles\NewsandEvents.csv"</font>),[Delimiter=<font color="red">","</font>, Columns=6, Encoding=1252, QuoteStyle=<font color="purple">QuoteStyle.None</font>]),<br></br>    #<font color="red">"Promoted Headers"</font> = <font color="purple">Table.PromoteHeaders</font>(Source, [PromoteAllScalars=<font color="blue">true</font>]),<br></br>    #<font color="red">"Changed Type"</font> = <font color="purple">Table.TransformColumnTypes</font>(#<font color="red">"Promoted Headers"</font>,{{<font color="red">"Start Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"End Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}, {<font color="red">"Period"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Biggest Event"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Description"</font>, <font color="blue">type</font> <font color="blue">text</font>}, {<font color="red">"Event Date"</font>, <font color="blue">type</font> <font color="blue">date</font>}}),<br></br>    #<font color="red">"Filtered Rows"</font> = <font color="purple">Table.SelectRows</font>(#<font color="red">"Changed Type"</font>, each ([Start Date] <> <font color="blue">null</font>)),<br></br>    #<font color="red">"Removed Bottom Rows"</font> = <font color="purple">Table.RemoveLastN</font>(#<font color="red">"Filtered Rows"</font>,4),<br></br>    #<font color="red">"Removed Bottom Rows1"</font> = <font color="purple">Table.RemoveLastN</font>(#<font color="red">"Removed Bottom Rows"</font>,3)<br></br><font color="blue">in</font><br></br>    #<font color="red">"Removed Bottom Rows1"</font></td></tr><tr ><td >LocalDateTable_ef645a16-ad19-4fb1-ae46-3bd06535ca8c</td><td >Calendar(Date(Year(MIN('Period'[Event Date])), 1, 1), Date(Year(MAX('Period'[Event Date])), 12, 31))</td></tr><tr ><td >LocalDateTable_d886f37f-43f4-4e9f-a311-1d6702e055d6</td><td >Calendar(Date(Year(MIN('Period'[End Date])), 1, 1), Date(Year(MAX('Period'[End Date])), 12, 31))</td></tr><tr ><td >LocalDateTable_73b926ee-758b-4a1e-b69d-b3b34fe80f4d</td><td >Calendar(Date(Year(MIN('corrdata_crypto_CMC'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('corrdata_crypto_CMC'[<font color="blue">date</font>])), 12, 31))</td></tr><tr ><td >LocalDateTable_c8075966-ebf8-4edc-a62c-dcf4bd8866df</td><td >Calendar(Date(Year(MIN('corrdata_btc_indices'[<font color="blue">date</font>])), 1, 1), Date(Year(MAX('corrdata_btc_indices'[<font color="blue">date</font>])), 12, 31))</td></tr></table><script>
	var toggler = document.getElementsByClassName("caret");
	for (var i = 0; i < toggler.length; i++){
		toggler[i].addEventListener("click", function() {
			this.parentElement.querySelector(".nested").classList.toggle("active");
		});
	}
		
	var togglerAll = document.getElementsByClassName("dropDownCaret");
	for (var j=0; j<togglerAll.length; j++){
		togglerAll[j].addEventListener("click", function(event){
			if (event.currentTarget != event.target) return;
			if(this.parentElement.querySelector(".nested").classList.contains("active")){
				this.querySelectorAll(".nested").forEach(function(currentValue, currentIndex, listObj) {
					if(currentValue.classList.contains("active")){
						currentValue.classList.remove("active");
					}
				});
			}
			else{
				this.querySelectorAll(".nested").forEach(function(currentValue, currentIndex, listObj) {
					if(!currentValue.classList.contains("active")){
						currentValue.classList.add("active");
					}
				});
			}
		});
	}
</script></body></html>